from telebot.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from database import crud
from missedbot import bot


_student_missed: list[int] = []
PAGINATOR = 5
__report_prefix = [
    "presenceDis_",
    "presenceGroup_",
    "studClick_",
]


def __is_prefix_callback(data: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –ª—é–±–æ–≥–æ
    –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ `__report_prefix`.
    """
    for it in __report_prefix:
        if it in data:
            return True
    return False


@bot.message_handler(
    is_admin=True,
    commands=["presencecheck"],
)
async def handle_presence_check(message: Message):
    await presence_check(message)


@bot.message_handler(
    is_admin=False,
    commands=["presencecheck"],
)
async def handle_no_presence_check(message: Message):
    await bot.send_message(message.chat.id, "–¢—ã –∫—Ç–æ? –û–æ")


async def presence_check(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ—á–Ω–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –∏ –∏—Ö ID –≤
    –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫ —Ç–∏–ø–∞ Inline. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É,
    –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É. –í—ã–±—Ä–∞–Ω–Ω—ã–π ID –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
    –≤ –≤–∏–¥–µ callback-–¥–∞–Ω–Ω—ã—Ö –≤ —Ñ—É–Ω–∫—Ü–∏—é, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ –ø–æ–ª–µ
    "callback_data" –∫–Ω–æ–ø–∫–∏.
    """
    disciplines = crud.get_disciplines()
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(
        *[
            InlineKeyboardButton(
                it.name,
                callback_data=f"presenceDis_{it.id}",
            )
            for it in disciplines
        ]
    )
    await bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–µ—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:",
        reply_markup=markup,
    )


@bot.callback_query_handler(
    func=lambda call: __is_prefix_callback(call.data),
)
async def callback_presence_check(call):
    type_callback = call.data.split("_")[0]
    match type_callback:
        case "presenceDis":
            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —É –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–µ—Ç—Å—è
            # –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞
            discipline_id = int(call.data.split("_")[1])
            groups = crud.get_assigned_group(discipline_id)
            markup = InlineKeyboardMarkup()
            markup.row_width = 1
            markup.add(
                *[
                    InlineKeyboardButton(
                        it.name,
                        callback_data=f"presenceGroup_0_{discipline_id}_{it.id}",
                    )
                    for it in groups
                ]
            )
            _student_missed.clear()
            await bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
                call.message.chat.id,
                call.message.id,
                reply_markup=markup,
            )
        case "presenceGroup" | "studClick":
            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
            # –µ—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç,
            # —Ç–æ –æ–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∏ –ø–æ–º–µ—á–∞–µ—Ç—Å—è
            # ‚ùå –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±–æ—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ,
            # —Ç–æ –æ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –Ω–µ–≥–æ
            paginator = int(call.data.split("_")[1])
            discipline_id = int(call.data.split("_")[2])
            group_id = int(call.data.split("_")[3])
            if type_callback == "studClick":
                student_id = int(call.data.split("_")[4])
                if student_id in _student_missed:
                    _student_missed.remove(student_id)
                else:
                    _student_missed.append(student_id)
            await student_check(
                call,
                paginator,
                discipline_id,
                group_id,
            )
        case _:
            await bot.edit_message_text(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                call.message.chat.id,
                call.message.id,
            )


async def student_check(
    call,
    paginator: int,
    discipline_id: int,
    group_id: int,
) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ group_id,
    –ø–∞–≥–∏–Ω–∏—Ä—É–µ—Ç –∏—Ö –∏ –≤—ã–≤–æ–¥–∏—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.

    :param call: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param paginator: –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    :param discipline_id: –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–µ ID –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.
    :param group_id: –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–µ ID –≥—Ä—É–ø–ø—ã.
    :return: None
    """
    students = crud.get_students(group_id)

    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(
        *[
            InlineKeyboardButton(
                f"‚úîÔ∏è{it.full_name}"
                if it.id not in _student_missed
                else f"‚ùå{it.full_name}",
                callback_data=f"studClick_{paginator}_{discipline_id}_{group_id}_{it.id}",
            )
            for it in students[PAGINATOR * paginator : PAGINATOR * (paginator + 1)]
        ]
    )
    if paginator == 0:
        markup.add(
            InlineKeyboardButton(
                "‚û°",
                callback_data=f"presenceGroup_{paginator + 1}_{discipline_id}_{group_id}",
            )
        )
    elif len(students) > PAGINATOR * (paginator + 1):
        markup.add(
            InlineKeyboardButton(
                "‚¨Ö",
                callback_data=f"presenceGroup_{paginator - 1}_{discipline_id}_{group_id}",
            ),
            InlineKeyboardButton(
                "‚û°",
                callback_data=f"presenceGroup_{paginator + 1}_{discipline_id}_{group_id}",
            ),
            row_width=2,
        )
    else:
        markup.add(
            InlineKeyboardButton(
                "‚¨Ö",
                callback_data=f"presenceGroup_{paginator - 1}_{discipline_id}_{group_id}",
            )
        )
    markup.add(
        InlineKeyboardButton(
            "üöÄ", callback_data=f"allPresent_{discipline_id}_{group_id}"
        ),
        InlineKeyboardButton(
            "‚öîÔ∏è", callback_data=f"allMissed_{discipline_id}_{group_id}"
        ),
        row_width=2,
    )
    markup.add(
        InlineKeyboardButton(
            "–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"apply_{discipline_id}_{group_id}"
        ),
        row_width=1,
    )
    await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        call.message.chat.id,
        call.message.id,
        reply_markup=markup,
    )


@bot.callback_query_handler(
    func=lambda call: ("allPresent_" in call.data or "allMissed_" in call.data),
)
async def callback_all_missed_present(call):
    """
    –ö–æ–≥–¥–∞ –≤—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
    """
    event = call.data.split("_")[0]
    discipline_id = int(call.data.split("_")[1])
    group_id = int(call.data.split("_")[2])
    _student_missed.clear()
    text = ""
    is_missed = False
    match event:
        case "allPresent":
            text = "–í—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏!!!"
        case "allMissed":
            is_missed = True
            text = "–ù–∞ –ø–∞—Ä–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞!!!"

    crud.set_all_missed_students(
        group_id,
        discipline_id,
        is_missed,
    )
    await bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.id,
    )


@bot.callback_query_handler(func=lambda call: "apply_" in call.data)
async def callback_all_present(call):
    """
    –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤ –ë–î –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏
    –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    """
    discipline_id = int(call.data.split("_")[1])
    group_id = int(call.data.split("_")[2])

    crud.set_missed_students(
        _student_missed,
        group_id,
        discipline_id,
    )
    await bot.edit_message_text(
        "–í—Å–µ –ø–æ—Ç–µ—Ä—è—à–∫–∏–Ω—Å—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã!!!",
        call.message.chat.id,
        call.message.id,
    )
